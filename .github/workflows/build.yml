name: Build Executable with PyInstaller

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-linux:
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install pyinstaller
        sudo apt-get install -y build-essential libssl-dev libffi-dev python3-dev

    - name: Build executable with PyInstaller (Linux)
      run: |
        pyinstaller --onefile --add-data "common_old.onnx:ddddocr" main.py

    - name: Upload Linux executable
      uses: actions/upload-artifact@v4
      with:
        name: linux-executable
        path: dist/main
        rename: main_linux

  build-macos:
    runs-on: macos-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Build executable with PyInstaller (macOS)
      run: |
        pyinstaller --onefile --add-data "common_old.onnx:ddddocr" main.py

    - name: Upload macOS executable
      uses: actions/upload-artifact@v4
      with:
        name: macos-executable
        path: dist/main
        rename: main_mac

  build-windows:
    runs-on: windows-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Build executable with PyInstaller (Windows)
      run: |
        pyinstaller --onefile --add-data "common_old.onnx;ddddocr" main.py

    - name: Upload Windows executable
      uses: actions/upload-artifact@v4
      with:
        name: windows-executable
        path: dist/main.exe
        rename: main_win.exe

  release:
    needs: [build-linux, build-macos, build-windows]
    runs-on: ubuntu-latest
    steps:
    - name: Download Linux Artifact
      uses: actions/download-artifact@v4
      with:
        name: linux-executable
        path: release-artifacts

    - name: Download macOS Artifact
      uses: actions/download-artifact@v4
      with:
        name: macos-executable
        path: release-artifacts

    - name: Download Windows Artifact
      uses: actions/download-artifact@v4
      with:
        name: windows-executable
        path: release-artifacts

    - name: Create GitHub release
      id: create_release
      run: |
        VERSION=$(date +'%Y%m%d')
        gh release create $VERSION \
          "release-artifacts/main_linux" \
          "release-artifacts/main_mac" \   
          "release-artifacts/main_win.exe" \
          --title "Release $VERSION" \
          --notes "Release $VERSION of the application"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
